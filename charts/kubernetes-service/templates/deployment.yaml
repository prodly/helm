{{/* Ensuring that only one deployment strategy was enabled by user */}}
{{- $multipleRolloutsRequested := 0 -}}
{{- range list ( default .Values.rollout.recreate.enabled false ) ( default .Values.rollout.rollingUpdate.enabled false ) ( default .Values.rollout.canary.enabled false ) ( default .Values.rollout.blueGreen.enabled false ) -}}
{{- if eq . true -}}
{{- $multipleRolloutsRequested = add1 $multipleRolloutsRequested -}}
{{- end -}}
{{- end -}}

{{- if gt $multipleRolloutsRequested 1 -}}
{{- fail "Cannot enable multiple deployment strategies, please, pick only one" -}}
{{- end -}}

{{- if or ( default .Values.rollout.blueGreen.enabled false ) ( default .Values.rollout.canary.enabled false ) }}
apiVersion: argoproj.io/v1alpha1
kind: Rollout
{{- else }}
apiVersion: apps/v1
kind: Deployment
{{- end }}
metadata:
  name: {{ include "kubernetes-service.fullname" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "meta.helm.sh/release-name": {{ .Release.Name }}
    "meta.helm.sh/release-namespace": {{ .Release.Namespace }}
  labels:
    {{- include "kubernetes-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "kubernetes-service.selectorLabels" . | nindent 6 }}
  strategy:
  {{- if ( default .Values.rollout.canary.enabled false ) }}
    canary:
      {{- if .Values.rollout.rollingUpdate.maxUnavailable }}
      maxUnavailable: {{ .Values.rollout.rollingUpdate.maxUnavailable }}
      {{- end }}
      {{- if .Values.rollout.rollingUpdate.maxSurge }}
      maxSurge: {{ .Values.rollout.rollingUpdate.maxSurge }}
      {{- end }}
      # Reference to a Service which the controller will update to point to the stable ReplicaSet
      stableService: {{ include "kubernetes-service.fullname" . }}-active
      # Reference to a Service which the controller will update to point to the canary ReplicaSet
      canaryService: {{ include "kubernetes-service.fullname" . }}-preview
      {{- if .Values.ingress.enabled }}
      trafficRouting:
        nginx:
          # Reference to an Ingress which has a rule pointing to the stable service
          # This Ingress will be closed with a new name, in order to achieve NGINX traffic splitting
          stableIngress: {{ include "kubernetes-service.fullname" . }}
      {{- end }}
      {{- if and ( .Values.rollout.canary.steps ) ( not ( kindIs "string" .Values.rollout.canary.steps ) ) }}
      analysis:
        startingStep: {{ default .Values.rollout.analysis.startingStep 1 }}
        templates:
          - templateName: {{ include "kubernetes-service.fullname" . }}-success-rate
        args:
          - name: service-name
            value: {{ include "kubernetes-service.fullname" . }}-preview
      steps:
        {{- toYaml .Values.rollout.canary.steps | nindent 8 }}
      {{- end }}
  {{- else if ( default .Values.rollout.blueGreen.enabled false ) }}
    blueGreen:
      # activeService specifies the service to update with the new template hash at time of promotion.
      # This field is mandatory for the blueGreen update strategy.
      activeService: {{ include "kubernetes-service.fullname" . }}-active
      # previewService specifies the service to update with the new template hash before promotion.
      # This allows the preview stack to be reachable without serving production traffic.
      # This field is optional.
      previewService: {{ include "kubernetes-service.fullname" . }}-preview
      autoPromotionEnabled: {{ if (eq ( default "false" ( .Values.rollout.blueGreen.autoPromotionEnabled | toString | lower ) ) "false") }}false{{ else }}true{{ end }}
      {{- if .Values.rollout.blueGreen.autoPromotionSeconds }}
      autoPromotionSeconds: {{ .Values.rollout.blueGreen.autoPromotionSeconds }}
      {{- end }}
      {{- if .Values.rollout.blueGreen.scaleDownDelaySeconds }}
      scaleDownDelaySeconds: {{ .Values.rollout.blueGreen.scaleDownDelaySeconds }}
      {{- end }}
      {{- if .Values.rollout.blueGreen.scaleDownDelayRevisionLimit }}
      scaleDownDelayRevisionLimit: {{ .Values.rollout.blueGreen.scaleDownDelayRevisionLimit }}
      {{- end }}
      {{- if .Values.rollout.blueGreen.previewReplicaCount }}
      previewReplicaCount: {{ .Values.rollout.blueGreen.previewReplicaCount }}
      {{- end }}
      {{- if .Values.rollout.blueGreen.enablePrePromotionAnalysis }}
      prePromotionAnalysis:
        templates:
          - templateName: {{ include "kubernetes-service.fullname" . }}-success-rate
        args:
          - name: service-name
            value: {{ include "kubernetes-service.fullname" . }}-preview
      {{- end }}
      {{- if .Values.rollout.blueGreen.enablePostPromotionAnalysis }}
      postPromotionAnalysis:
        templates:
          - templateName: {{ include "kubernetes-service.fullname" . }}-success-rate
        args:
          - name: service-name
            value: {{ include "kubernetes-service.fullname" . }}-preview
      {{- end }}
  {{- else if ( default .Values.rollout.recreate.enabled false ) }}
    type: Recreate
  {{- else }}
    type: RollingUpdate
    rollingUpdate:
      {{- if .Values.rollout.rollingUpdate.maxUnavailable }}
      maxUnavailable: {{ .Values.rollout.rollingUpdate.maxUnavailable }}
      {{- end }}
      {{- if .Values.rollout.rollingUpdate.maxSurge }}
      maxSurge: {{ .Values.rollout.rollingUpdate.maxSurge }}
      {{- end }}
  {{- end }}
  template:
    metadata:
      annotations:
        "meta.helm.sh/release-name": {{ .Release.Name }}
        "meta.helm.sh/release-namespace": {{ .Release.Namespace }}
        {{- with .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        {{- include "kubernetes-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount }}
      serviceAccountName: {{ .Values.serviceAccount }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Values.appVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: '{{ .Values.service.customHealthCheckPath | default ( printf "%s/actuator/health" .Values.service.path) }}'
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.service.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.service.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.service.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.service.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.service.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: '{{ .Values.service.customHealthCheckPath | default ( printf "%s/actuator/health" .Values.service.path) }}'
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.service.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.service.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.service.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.service.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.service.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: PORT
              value: {{ .Values.service.port | quote }}
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: SERVER_SERVLET_CONTEXT_PATH
              value: '/{{ .Values.service.path }}'
            {{- if kindIs "map" .Values.env }}
            {{- range $key, $val := .Values.env }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
            {{- else }}
            {{- range $index, $val := .Values.env }}
            - name: {{ $val.name }}
              {{- if $val.value }}
              value: {{ $val.value | quote }}
              {{- else }}
              valueFrom:
              {{- toYaml $val.valueFrom | nindent 16 -}}
              {{- end }}
            {{- end }}
            {{- end }}
          {{- if .Values.efs.enabled }}
          volumeMounts:
            - name: efs-share
              mountPath: /mnt/efs
          {{- end}}
        {{- if .Values.sqsd.enabled }}
        - name: {{ .Chart.Name }}-sqsd
          securityContext:
            {{- toYaml .Values.sqsd.securityContext | nindent 12 }}
          image: {{ .Values.sqsd.repository }}:{{ .Values.sqsd.tag | default "latest" }}
          imagePullPolicy: {{ .Values.sqsd.pullPolicy }}
          env:
            - name: SQSD_QUEUE_NAME
              value: {{ .Values.sqsd.queueName | quote }}
            {{- if or ( default .Values.rollout.blueGreen.enabled false ) ( default .Values.rollout.canary.enabled false ) }}
            - name: SQSD_WORKER_HTTP_HOST
              value: 'http://{{ include "kubernetes-service.fullname" . }}-active.{{ .Release.Namespace }}:{{ .Values.service.port }}'
            {{- else }}
            - name: SQSD_WORKER_HTTP_HOST
              value: 'http://{{ include "kubernetes-service.fullname" . }}.{{ .Release.Namespace }}:{{ .Values.service.port }}'
            {{- end }}
            - name: SQSD_WORKER_HTTP_PATH
              value: {{ .Values.sqsd.workerHttpPath | quote }}
            - name: SQSD_WORKER_HTTP_REQUEST_CONTENT_TYPE
              value: {{ .Values.sqsd.workerContentType | quote }}
            {{- range $key, $val := .Values.sqsd.env }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
          resources:
            {{- toYaml .Values.sqsd.resources | nindent 12 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.efs.enabled }}
      volumes:
        - name: efs-share
          persistentVolumeClaim:
            claimName: {{ .Values.efs.claimName }}
      {{- end }}